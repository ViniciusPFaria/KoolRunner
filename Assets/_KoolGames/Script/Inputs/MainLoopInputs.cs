//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_KoolGames/Script/Inputs/MainLoopInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace KoolGames
{
    public partial class @MainLoopInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainLoopInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainLoopInputs"",
    ""maps"": [
        {
            ""name"": ""BasicMap"",
            ""id"": ""5f69fe3b-4cf6-4ec1-8b76-9464f21d340d"",
            ""actions"": [
                {
                    ""name"": ""OnClick"",
                    ""type"": ""Button"",
                    ""id"": ""b9972979-155d-4cd3-a515-0f5129e2136c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""44c1b4ef-5cf0-4625-b35a-b67b9383ea42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9992a89f-6a7b-4edb-9809-5d1dc2534eb7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a750e1c1-4f6f-4c64-8b94-105dada3784f"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72edc553-3827-4874-88fa-80cde99c1b0f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""921fa4dd-2fb4-4e23-88ea-8f0f65f689fb"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // BasicMap
            m_BasicMap = asset.FindActionMap("BasicMap", throwIfNotFound: true);
            m_BasicMap_OnClick = m_BasicMap.FindAction("OnClick", throwIfNotFound: true);
            m_BasicMap_MousePosition = m_BasicMap.FindAction("MousePosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BasicMap
        private readonly InputActionMap m_BasicMap;
        private IBasicMapActions m_BasicMapActionsCallbackInterface;
        private readonly InputAction m_BasicMap_OnClick;
        private readonly InputAction m_BasicMap_MousePosition;
        public struct BasicMapActions
        {
            private @MainLoopInputs m_Wrapper;
            public BasicMapActions(@MainLoopInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @OnClick => m_Wrapper.m_BasicMap_OnClick;
            public InputAction @MousePosition => m_Wrapper.m_BasicMap_MousePosition;
            public InputActionMap Get() { return m_Wrapper.m_BasicMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasicMapActions set) { return set.Get(); }
            public void SetCallbacks(IBasicMapActions instance)
            {
                if (m_Wrapper.m_BasicMapActionsCallbackInterface != null)
                {
                    @OnClick.started -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnOnClick;
                    @OnClick.performed -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnOnClick;
                    @OnClick.canceled -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnOnClick;
                    @MousePosition.started -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_BasicMapActionsCallbackInterface.OnMousePosition;
                }
                m_Wrapper.m_BasicMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @OnClick.started += instance.OnOnClick;
                    @OnClick.performed += instance.OnOnClick;
                    @OnClick.canceled += instance.OnOnClick;
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                }
            }
        }
        public BasicMapActions @BasicMap => new BasicMapActions(this);
        public interface IBasicMapActions
        {
            void OnOnClick(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
        }
    }
}
